参考资料：
VZ300_tech_manual.pdf
VZ300-tech-ref-man.pdf
vzem_22.zip VZDIO.C
vz300_review.pdf


-----------------------------------------------------------------
根据在物理软驱和软驱卡的调试跟踪，得到的结论
-----------------------------------------------------------------

2020-10-23

纠正以前的错误认识，POLLING区的长度并不是固定，只是根据读取的信号进行反转，当主机有读入操作时，POLLING置零。
软盘上记录的信号，就是简单的主机写入信号。读取时，软驱卡会在数据反转时产生1.125us的方波信号。
物理软驱抓到的数据，过0有1.125us的上升沿：

按照CPU频率计数，时钟区域长度 28，数据区域长度 87
磁盘记录的数据在翻转时，经软驱卡处理后，产生长度2.5时钟周期左右的信号。

记录每位的长度相同。
记录数据0，需要写入的信号翻转1次，记录1个1us方波信号。
记录数据1，需要写入的信号翻转2次，记录2个1us方波信号。

调试软驱仿真部分，可以在仿真软驱RAM跟踪写入内容，例如在格式化时查看写入内容。
FDC_SIG_CLK <= FDC_RAM_W;


跟踪读取信号，来判断仿真软驱工作状态，例如在 IDAM 程序特定位置开始记录。例如：

// 读取之前
trap_clk <=	(
	// 读取 0x80 0x80  0xFE 0xE7 0x18 0xC3  扇区
	LATCHED_CPU_A==16'h5441 || LATCHED_CPU_A==16'h54C6
 || LATCHED_CPU_A==16'h554B || LATCHED_CPU_A==16'h55D0 || LATCHED_CPU_A==16'h5655 || LATCHED_CPU_A==16'h56DA
 || LATCHED_CPU_A==16'h57EF

	// 读取 0x80 0x80  0xC3 0x18 0xE7 0xFE
 || LATCHED_CPU_A==16'h5B60 || LATCHED_CPU_A==16'h5BE5
 || LATCHED_CPU_A==16'h5C6A || LATCHED_CPU_A==16'h5CEF || LATCHED_CPU_A==16'h5D74 || LATCHED_CPU_A==16'h5DF9

	// 读取数据 读取失败 读取成功
 || LATCHED_CPU_A==16'h5E7D || LATCHED_CPU_A==16'h5E9F || LATCHED_CPU_A==16'h5EA2
	);

// 读取成功
trap_clk <=	(
	// 找到 0x80 0x80  0xFE 0xE7 0x18 0xC3  扇区
	LATCHED_CPU_A==16'h5446 || LATCHED_CPU_A==16'h54C8 || LATCHED_CPU_A==16'h54CB
 || LATCHED_CPU_A==16'h5550 || LATCHED_CPU_A==16'h55D5 || LATCHED_CPU_A==16'h565A || LATCHED_CPU_A==16'h56DF
 || LATCHED_CPU_A==16'h57FB

	// 找到 0x80 0x80  0xC3 0x18 0xE7 0xFE
 || LATCHED_CPU_A==16'h5B65 || LATCHED_CPU_A==16'h5BEA
 || LATCHED_CPU_A==16'h5C6F || LATCHED_CPU_A==16'h5CF4 || LATCHED_CPU_A==16'h5D79 || LATCHED_CPU_A==16'h5DFE

	// 读取数据 读取失败 读取成功
 || LATCHED_CPU_A==16'h5E7D || LATCHED_CPU_A==16'h5E9F || LATCHED_CPU_A==16'h5EA2
	);

// 使用后，系统不稳定。用 FDC_SIG_CLK 替代
trap_clk <=	FDC_RAM_W;	//磁盘写

(*keep*)wire trap =	(LATCHED_CPU_A==16'h554B);

-----------------------------------------------------------------
以下内容是从软件执行效果反推出来的，未在实际软驱环境下验证。
-----------------------------------------------------------------

2019-08-09

结论：

通过DOS程序INIT，可以确定的几个值：
记录位的长度：0x73 个时钟周期。
时钟区的长度：0x1C 个时钟周期。
POLLING区的长度：
从读取POLLING成功（值为1），到读取DATA中间间隔了 0x43 个时钟周期。
读取POLLING不成功再次读取，循环为 0x16个时钟周期。（IDAM 0xC3）读取 POLLING 的循环其中有2位是 0x21个时钟周期。
从最后1位读取 POLLING 定位后，到开始写入信号下拉，中间经过了1个位的循环，并向后错了 0x5D 时钟周期
写入数据最后1位的长度为 0x3F

（假设 POLLING区、时钟区和数据区不重合）
0x73-0x1C = 0x57 数据区+POLLING的长度。
0x43-0x1C = 0x27 推测 POLLING 的长度最大，也是 DATA 区的最小长度。实际长度要小于这个值。
0x73-0x27 = 0x4C POLLING 开始位置，同时也是DATA结束的位置。
0x21长度的POLLING，0x1C长度的时钟区，之后是数据区。
由于要满足 POLLING 到读取有效数据之间小于 0x43 个时钟周期，安排还是很紧的。


完成后看，POLLING 以时钟区为开端，也可以实现，相对来说更合理些。
至于POLLING再时钟位之前还是之后，要看具体电路图。
两种代码都实现了有。


一、软盘每位长度 0x73
记录1个数据位分为3部分：POLLING区、时钟区、数据区。长度分别为不少于0x21、等于0x1C、不大于0x57-0x1C(0x2F+0x28-0x1C)。

（软驱文档图片中数据C到D应为7.9us）
经过INIT采样调试：读取循环长度为 0x1C+0x2F+0x28 = 0x73 = 115
115/3.54 = 32.486us

POLLING
0x21 = 33
33/3.54 = 9.32us

CLOCK DOMAIN
0x1C = 28
28/3.54 = 7.9us

DATA DOMAIN
0x2F = 47
47/3.54 = 13.28us
0x28 = 40
40/3.54 = 11.3us


二、磁道长度
磁道有效数据：154字节 * 16扇区 = 2464字节 = 0x9A0字节

记录磁道有效数据时钟数：2464字节*8位*115时钟 = 2266880时钟
60秒*1000_000*3.54/2266880 = 93.7圈
（转速低于93.7圈就能满足要求）
软驱每分钟85转和80转的驱动都能用。

INIT 格式化时，首先写入 0x58469 + 1 (361578)个时钟周期的 1（产生波形图：1us 的方波信号，之后是空白）
361578/3.54
旋转一圈需要的时钟数 60/85*1000000*3.54 = 2498824
361578/2498824 = 0.1447(圈) 初始化写入的空白数据（空白记录，不是有效数据）

之后的初始化数据覆盖了开始的1us的方波信号。


三、格式化时，一些特殊的位置
格式化时，每个扇区长度是0x9A。
每扇区结束后（写完0x00---0x99字节后），会有一个空白（0xA5个时钟周期）。
长度为0x117-0x73+1
扇区结束时 0x11D-0x73+1
(程序执行在 0x4CCE)


四、磁盘记录方式
PHASE0			FDC_CT[0]
PHASE1			FDC_CT[1]
PHASE2			FDC_CT[2]
PHASE3			FDC_CT[3]
DRIVE1			FDC_CT[4]
DRIVE2			FDC_CT[7]
MOTOR			(FDC_CT[4])|(FDC_CT[7])
WRITE_REQUEST_N		FDC_CT[6]
WRITE_DATA_BIT		FDC_CT[5]

写入信号WRITE_DATA_BIT翻转，磁盘记录1us（根据软驱文档记录）的方波信号。
记录每位的长度相同。
记录数据0，需要写入的信号翻转1次，记录1个1us方波信号。
记录数据1，需要写入的信号翻转2次，记录2个1us方波信号。
写入开始信号WRITE_REQUEST_N下拉时的信号WRITE_DATA_BIT为基准。


五、软盘POLLING长度
POLLING出现在时钟信号之前。

考虑这个问题时，需要满足2个条件。
1、读取到 POLLING 信号，等待 0x43 个时钟周期后，在数据区域（长度0x2B个时钟周期）。
2、POLLING信号的长度不小于 0x21 个时钟周期。

根据文档 CLOCK BIT 信号长度 1us 约4个时钟周期。
POLLING不是 CLOCK BIT。

两次读取 POLLING 的时间相差 0x16个时钟周期，所以 POLLING 的长度不小于 0x16，这样不会跳过POLLING信号。

这两个指令读取POLLING，长度0x16个时钟周期
ROM:543B loc_543B:                               ;
ROM:543B                 in      a, (c)
ROM:543D                 jp      p, loc_543B

另外，这两处（IDAM 0xC3）读取 POLLING 的时间间隔是 0x13 + 2 + 0x0A + 2 = 0x21。比较特殊。
经核对，格式化时写入的数据 0xC3 无异常。
另外，也相当于插入了一次无效的读取DATA操作。
ROM:5673 loc_5673:                               ;
ROM:5673                 in      a, (11h)
ROM:5675                 in      a, (c)
ROM:5677                 jp      p, loc_5673

ROM:5683 loc_5683:                               ;
ROM:5683                 in      a, (11h)
ROM:5685                 in      a, (c)
ROM:5687                 jp      p, loc_5683

读取POLLING循环为 0x16，之后等 0x43，等 0x0E。
或者读取POLLING循环为 0x21，之后等 0x43，等 0x0E。

0x21 循环 暂时无问题

最终选定长度定为 0x2C。
这个值大于 0x21。过大，有可能影响到写入时的定位。


六、步进电机的控制
PHASE0			FDC_CT[0]
PHASE1			FDC_CT[1]
PHASE2			FDC_CT[2]
PHASE3			FDC_CT[3]
DRIVE1			FDC_CT[4]
DRIVE2			FDC_CT[7]
MOTOR			(FDC_CT[4])|(FDC_CT[7])

步进电机的控制同 APPLE II 的5寸软驱信号。
进半轨，记录的位置变化 0x4D0 个字节
进1轨，记录的位置变化 0x9A0 = 0x4D0 * 2
40轨道的磁头位置，内部位置编号 TRACK1_NO 用 0 --- 78 表示。


七、写入扇区
从最后1位读取 POLLING 定位后，到开始写入信号下拉，中间经过了1个位的循环，并向后错了 0x5D 时钟周期
写入数据最后1位的长度为 0x3F

时钟后错，意味着写入扇区数据时，会覆盖掉紧接扇区（或空白区）的第1个位置，包括该位的时钟位和数据位。


八、关于磁盘镜像，使用前要核对磁盘格式，保证每个扇区的标志信息都存在。
IDAM和数据区使用的是累加求和校验值。
IDAM有2+1个字节，1个字节TRACK 1个字节SECTOR 1个字节SUM
数据区有128+2个字节，128个字节数据 2个字节的SUM


九、IDAM寻找扇区标志
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFE, 0xE7, 0x18, 0xC3
IDAM寻找扇区标志，至少要找到两个 0x80。

0x4241
ERROR 寄存器a存放错误代码

程序地址
IDAM 读取    对比成功
0x80 0x5441  0x5446
0x80 0x54C6  0x54C8 || 0x54CB

0xFE 0x554B  0x5550
0xE7 0x55D0  0x55D5
0x18 0x5655  0x565A
0xC3 0x56DA  0x56DF

扇区 0x57EF  0x57FB


DATA 读取    对比成功
0x80 0x5B60  0x5B65
0x80 0x5BE5  0x5BEA

0xC3 0x5C6A  0x5C6F
0x18 0x5CEF  0x5CF4 
0xE7 0x5D74  0x5D79
0xFE 0x5DF9  0x5DFE

读取数据 0x5E7D
读取完128个数据准备校验 0x5E88
读取失败 0x5E9F
读取成功 0x5EA2


在扇区里0x0C位置找扇区号
每轨的扇区号依次为：
0x00 0x0B 0x06 0x01
0x0C 0x07 0x02 0x0D
0x08 0x03 0x0E 0x09
0x04 0x0F 0x0A 0x05

读取时，IDAM 找到扇区后，结尾未通过POLLING对其下个数据，两个读取间隔 0x73 个时钟周期来完成定位。
写入时，IDAM 找到扇区后，结尾未通过POLLING对其下个数据，读取到写入间隔约 0x73 + 0x2C 个时钟周期。相当于延时了约 0x73 + 0x28 个时钟周期来完成定位。

写入扇区时，写入操作会提前结束。在数据信号跳转之后的 0x3E 个时钟周期，拉高结束。


十、仿真信号时的处理
在时钟区开始时读写DSK镜像数据，在数据区开始时改变CPU可能读取的扇区数据。


-----------------------------------------------------------------
-----------------------------------------------------------------
-----------------------------------------------------------------
问题排查

执行 INIT 后，写入信号完成。格式化后检测时，IDAM 找不到要找的扇区，报错。
相当于执行 DIR。

(*keep*)wire trap =	(LATCHED_CPU_A==16'h4d17);

ROM:4D10 loc_4D10:                               ;
ROM:4D10                 ld      ix, 4D67h
ROM:4D14
ROM:4D14 loc_4D14:                               ;
ROM:4D14                 call    IDAM_53EA
ROM:4D17                 jr      nz, loc_4D45

ROM:4D45 loc_4D45:                               ;
ROM:4D45                 cp      11h
ROM:4D47                 jp      z, ERROR_4241
ROM:4D4A                 ld      a, 6
ROM:4D4C                 jp      ERROR_4241

通过 4D17 跳转到了 4D45，进而报错 ?DISK I/O ERROR

执行命令 DIR 也会报错
ROM:491B loc_491B:                               ;
ROM:491B                 di
ROM:491C                 call    READ_5B27
ROM:491F                 or      a
ROM:4920                 jp      nz, ERROR_4241



能够检测到的扇区号 0x02 0x08 0x0E 0x0F 0x05 0x00 0x06 0x0C


h 是查找的次数，初值为 0xA5。
57EF 比较当前扇区和目标扇区。

ROM:53EA IDAM_53EA:                              ;
ROM:53EA                                         ;
ROM:53EA                 ld      h, 0A5h ;

ROM:57E9 loc_57E9:                               ;
ROM:57E9                 in      a, (c)
ROM:57EB                 jp      p, loc_57E9
ROM:57EE                 ex      af, af'
ROM:57EF                 cp      b
ROM:57F0                 jp      z, loc_57FB
ROM:57F3                 dec     h
ROM:57F4                 jp      nz, loc_5431
ROM:57F7                 ld      a, 9
ROM:57F9                 or      a
ROM:57FA                 ret

经跟踪波形分析，读取时，总是读取成功1扇区，读取失败跳过1扇区。
trap_clk <=	(LATCHED_CPU_A==16'h57EF);

跟踪如下条件的 INIT，发现很多波形FE E7 18之后找不到 C3
always @(posedge CPU_CLK)
		trap_clk <=	(LATCHED_CPU_A==16'h5446 || LATCHED_CPU_A==16'h5550 || LATCHED_CPU_A==16'h55D5 || LATCHED_CPU_A==16'h565A || LATCHED_CPU_A==16'h56DA || LATCHED_CPU_A==16'h56DF || LATCHED_CPU_A==16'h57F0);
		// 找到 0x80 0xFE 0xE7 0x18 0xC3之前 0xC3 扇区

之后，找一个切入点，进行分析
(*keep*)wire trap =	(LATCHED_CPU_A==16'h56D3 && FDC_DATA!=8'hC3);	// IDAM check 0xC3


经过跟踪，下面这两组指令较为特殊，导致两次读取 POLLING 的时间是 0x13 + 2 + 0x0A + 2 = 0x21 = 33
ROM:5673 loc_5673:                               ;
ROM:5673                 in      a, (11h)
ROM:5675                 in      a, (c)
ROM:5677                 jp      p, loc_5673

ROM:5683 loc_5683:                               ;
ROM:5683                 in      a, (11h)
ROM:5685                 in      a, (c)
ROM:5687                 jp      p, loc_5683


-----------------------------------------------------------------
-----------------------------------------------------------------

2019-07-29
能通过 INIT 的参数, 不报错的参数。

FDC_POLL1_CNT	<=	6'h16 + NN;

NN INIT DIR
0  FAIL 卡死
1  FAIL 卡死
2  FAIL 卡死
3  OK   卡死
4  OK   卡死
5  OK   卡死
6  OK   卡死
7  OK   卡死
8  OK   卡死
9  OK   卡死
10 OK   卡死
11 OK   卡死
12 OK   卡死
13 OK   卡死
14 OK   卡死
15 OK   卡死

最终分析结果，发现 DSK 中的 IDAM 扇区位置信息不正确。
需要提供正确的磁盘格式文件。

-----------------------------------------------------------------
-----------------------------------------------------------------

2019-07-29
寻找扇区后，不能找到相邻的扇区。

需要找空白部分的处理方式。

需要验证：
空白部分（无信号跳转）是不是应该，POLLING 信号正常出现，但 DATA_BIT 为 1。



数据区的读取程序
ROM:5E78 loc_5E78:                               ;
ROM:5E78                 in      a, (c)
ROM:5E7A                 jp      p, loc_5E78
ROM:5E7D                 inc     hl
ROM:5E7E                 dec     e
ROM:5E7F                 jr      z, loc_5E88
ROM:5E81                 ex      af, af'
ROM:5E82                 ld      (hl), a
ROM:5E83                 ld      a, r
ROM:5E85                 jp      loc_5E05

-----------------------------------------------------------------
-----------------------------------------------------------------
2019-08-01
扇区能找到，校验错误。
找到问题，是转换后 DSK 的数据有错。

数据区的数据校验
ROM:5E88 loc_5E88:                               ;
ROM:5E88                 call    sub_5B10
ROM:5E8B                 inc     hl
ROM:5E8C                 ld      a, (hl)
ROM:5E8D                 cp      e
ROM:5E8E                 jr      nz, loc_5E95
ROM:5E90                 inc     hl
ROM:5E91                 ld      a, (hl)

ROM:5B10 sub_5B10:                               ;
ROM:5B10                                         ;
ROM:5B10                 push    iy
ROM:5B12                 pop     hl
ROM:5B13                 ld      de, 4Dh ; 'M'
ROM:5B16                 add     hl, de
ROM:5B17                 ld      e, (hl)
ROM:5B18                 ld      d, 0
ROM:5B1A                 ld      b, 7Fh ; ''
ROM:5B1C
ROM:5B1C loc_5B1C:                               ;
ROM:5B1C                 inc     hl
ROM:5B1D                 ld      a, e
ROM:5B1E                 add     a, (hl)
ROM:5B1F                 ld      e, a
ROM:5B20                 ld      a, 0
ROM:5B22                 adc     a, d
ROM:5B23                 ld      d, a
ROM:5B24                 djnz    loc_5B1C
ROM:5B26                 ret
ROM:5B26 ; End of function sub_5B10

-----------------------------------------------------------------
-----------------------------------------------------------------

2019-08-03

扇区IDEM找到后写入数据，位置错后了将近半个位。实际物理软驱应该不受影响。
写入 DATA 区，不会影响 IDEM 区。IDEM 格式化后，不会移动位置。

找到 IDAM 后写数据，会错后40个左右时钟周期。
物理软驱不受影响。虚拟软驱采取了对齐时钟，便于理解。


-----------------------------------------------------------------
-----------------------------------------------------------------

2019-08-09

写入扇区
0x5B0D
0x99 写入 0x01
读取时是  0x04

要检查时序约束是否有问题。

-----------------------------------------------------------------
-----------------------------------------------------------------
LASER310 DOS 子程序功能

4023H JP IDAM Read identification address mark

IDAM_53EA
53EA 入口
541C --- 查找扇区同步字节 0x80 0x80 0x80 0xFE 0xE7  0x18  0xC3 (不为零)

400EH JP ERROR Error handling routine

ERROR_4241
4241 入口 寄存器a存放错误代码

WRITE_59A1
59A1 入口 数据写入指定扇区


403BH JP STPIN Step in
403EH JP STPOUT Step out
4038H JP DLY Delay mS in reg C
4032H JP WRITE Write a sector to disk

-----------------------------------------------------------------
-----------------------------------------------------------------


一、软盘每位长度
经过INIT采样调试：读取循环长度为 0x75 即 0x00 0x74
经过DIR采样调试：读取循环长度为 0x6E 即 0x00 0x6D
最终位长度定为0x75



二、软盘POLLING长度
根据文档 CLOCK BIT 信号长度 1us 约4个时钟周期。

两次读取 POLLING 的时间相差 0x16个时钟周期，所以 POLLING 的长度不小于 0x16，这样不会跳过POLLING信号。

这两个指令读取POLLING，长度0x16个时钟周期
ROM:543B loc_543B:                               ;
ROM:543B                 in      a, (c)
ROM:543D                 jp      p, loc_543B

最终程序中选定长度暂定为 0x18。

选一个值需要大于 0x16，又不超过 12us*3.54。
(0x0E+1)*2和0x16 的中间值 是 0x1A。


读取POLLING循环为 0x16，之后等 0x43，等 0x0E。

0x16 + 0x43 = 0x59 超过了 0x55


32.2us = 114 = 0x72
12us = 42.5

三、编码方式
两个输出位为一组。第1个为时钟位，第2个为数据位。相同为1，不同为0。时钟位是上一个数据位的反转。


-----------------------------------------------------------------
格式化时

INIT时序图分开看01.png
INIT时序图分开看02.png


时钟信号FDC_SIG_CLK：FDC_CT发生变化
LATCHED_FDC_CT<=FDC_CT;
FDC_SIG_CLK<=(LATCHED_FDC_CT!=FDC_CT);


首先写入 0x58469 + 1 (361578)个时钟周期的 1

361578/3.54

旋转一圈需要的时钟数 60/85*1000000*3.54 = 2498824
361578/2498824 = 0.1447(圈) 初始化写入的同步数据


写入循环
0x1A 0x2D 0x26

0x1A+0x2D+0x26 + 3 = 0x70 = 112

112/3.54 = 31.638
2498824 / 112 = 22311
22311/8 = 2788

2788-2464=324
324/2788 = 0.116(圈) 实际同步数据

同步信号 324 * 8 * 0x70 = 290304


核对：
(12us-1us)*3.54 = 39 = 0x27

0x26+0x1A+2 = 0x42

结论：
0x26 是 POLLING 读取的内容
读取时跳过了 0x43，是 0x26+0x1A
数据区是 0x2D

0x1A 对应的信号一定是前一信号的翻转
之后是数据区(0x2D)，内容与0x1A相同，则为0, 不同为1。
之后延续数据区的值，长度为 0x26。


需要验证
POLLING 读取操作后，变为1。
数据翻转后，变后0。

-----------------------------------------------------------------
调试 DIR 命令

通过 子程序IDAM_53EA  53EA---587A
调试 子程序READ_5B27  5B2E---5EBD
5E7D

-----------------------------------------------------------------

调试 DIR 命令

磁道同步 查找 0x80 0x80 ?? 0xFE 0xE7 0xC3

ROM:5431 loc_5431:
ROM:5431
ROM:5431                 ld      a, (68DFh)
ROM:5434                 and     4
ROM:5436                 jr      z, loc_540E
ROM:5438                 in      a, (11h)      ; FDC DATA
ROM:543A                 ld      b, a
ROM:543B
ROM:543B loc_543B:
ROM:543B                 in      a, (c)        ; FDC POLLING
ROM:543D                 jp      p, loc_543B
ROM:5440                 ld      a, b
ROM:5441
ROM:5441 loc_5441:
ROM:5441                 cp      80h ;
ROM:5443                 jp      nz, loc_5431

......

ROM:5545 loc_5545:
ROM:5545                 in      a, (c)
ROM:5547                 jp      p, loc_5545
ROM:554A                 ld      a, b
ROM:554B                 cp      0FEh ; '
ROM:554D                 jp      nz, loc_5431
ROM:5550                 nop
ROM:5551                 nop
ROM:5552                 nop
ROM:5553                 ld      a, 0
ROM:5555                 ld      a, 0
ROM:5557                 in      a, (11h)
ROM:5559
ROM:5559 loc_5559:
ROM:5559                 in      a, (c)
ROM:555B                 jp      p, loc_5559

......

ROM:55D0                 cp      0E7h ; '
ROM:55D2                 jp      nz, loc_5431

......

ROM:5655                 cp      18h
ROM:5657                 jp      nz, loc_5431

......

ROM:56DA                 cp      0C3h ; '
ROM:56DC                 jp      nz, loc_5431


考虑到这条指令，奇数转移，所以用0x7F来补齐
jp      p, loc_543B

LATCHED_IO_FDC_DATA	<=	{FDC_POLL, 7'h7F};


-----------------------------------------------------------------
调试 DIR 命令

执行到56D1出错
应该 C3 读入的是 D1
C3  1100 0011
D1  1101 0001

(*keep*)wire trap =	(LATCHED_CPU_A==16'h5673);


ROM:5673 loc_5673:
ROM:5673                 in      a, (11h)
ROM:5675                 in      a, (c)
ROM:5677                 jp      p, loc_5673

代码比较特别的部分。


子程序READ_5B27  5B2E---5EBD
ROM:5B27 READ_5B27:
ROM:5B27                 ld      (iy+13h), 0Ah
ROM:5B2B
ROM:5B2B loc_5B2B:
ROM:5B2B                 call    IDAM_53EA
ROM:5B2E                 jp      z, loc_5B37
ROM:5B31                 cp      11h
ROM:5B33                 ret     z
ROM:5B34                 ld      a, 9
ROM:5B36                 ret


子程序IDAM_53EA  53EA---587A

57FC
587A ret 返回 5B2E


ROM:5B27 READ_5B27:                              ;
ROM:5B27                                         ;
ROM:5B27                 ld      (iy+13h), 0Ah
ROM:5B2B
ROM:5B2B loc_5B2B:                               ;
ROM:5B2B                 call    IDAM_53EA
ROM:5B2E                 jp      z, loc_5B37
ROM:5B31                 cp      11h
ROM:5B33                 ret     z
ROM:5B34                 ld      a, 9
ROM:5B36                 ret

ROM:5B37 loc_5B37:
ROM:5B37                 push    iy
ROM:5B39                 pop     hl
ROM:5B3A                 ld      de, 4Ch ; 'L'
ROM:5B3D                 add     hl, de
ROM:5B3E                 ld      e, 83h ; '
ROM:5B40                 jr      loc_5B45


可以返回，转到了 5B37

ROM:5B2E                 jp      z, loc_5B37


-----------------------------------------------------------------

在程序 IDAM 中，找到扇区后，没有读取 POLLING 来找下一个数据。
两次读取之间的间隔 0x73 个时钟周期（1个数据位），到 5B45 读取数据。


ROM:5B27 READ_5B27:                              ;
ROM:5B27                                         ;
ROM:5B27                 ld      (iy+13h), 0Ah
ROM:5B2B
ROM:5B2B loc_5B2B:                               ;
ROM:5B2B                 call    IDAM_53EA
ROM:5B2E                 jp      z, loc_5B37
ROM:5B31                 cp      11h
ROM:5B33                 ret     z
ROM:5B34                 ld      a, 9
ROM:5B36                 ret

ROM:5B45 loc_5B45:                               ;
ROM:5B45                 in      a, (11h)
ROM:5B47
ROM:5B47 loc_5B47:                               ;
ROM:5B47                 in      a, (c)
ROM:5B49                 jp      p, loc_5B47

-----------------------------------------------------------------
INIT 写入扇区后有延时
程序执行在 4CCE
(*keep*)wire trap =	(FDC_RAM_W==1'b1 && FDC_RAM_ADDR_W==18'h00098 || (LATCHED_CPU_A==0));

ROM:4CB5 loc_4CB5:                               ;
ROM:4CB5                 out     (10h), a
ROM:4CB7                 xor     0
ROM:4CB9                 ld      d, a
ROM:4CBA                 dec     hl
ROM:4CBB
ROM:4CBB loc_4CBB:                               ;
ROM:4CBB                 out     (10h), a
ROM:4CBD                 jp      loc_4CC0
ROM:4CC0 ; ---------------------------------------------------------------------------
ROM:4CC0
ROM:4CC0 loc_4CC0:                               ;
ROM:4CC0                                         ;
ROM:4CC0                 inc     hl
ROM:4CC1                 inc     hl
ROM:4CC2                 nop
ROM:4CC3                 dec     b
ROM:4CC4                 jp      nz, loc_4B90
ROM:4CC7                 ld      (iy+33h), d
ROM:4CCA                 exx
ROM:4CCB                 ld      a, (ix+1)
ROM:4CCE                 inc     ix
ROM:4CD0                 ld      (de), a
ROM:4CD1                 add     a, (hl)
ROM:4CD2                 ld      (bc), a
ROM:4CD3                 ld      a, (de)
ROM:4CD4                 exx
ROM:4CD5                 cp      0FFh
ROM:4CD7                 jp      nz, loc_4B85
ROM:4CDA                 exx
ROM:4CDB                 xor     a
ROM:4CDC                 ld      (de), a
ROM:4CDD                 ld      a, (hl)
ROM:4CDE                 inc     a
ROM:4CDF                 ld      (hl), a
ROM:4CE0                 ld      (bc), a
ROM:4CE1                 exx

INIT写入扇区模板
ROM:4D4C ; ---------------------------------------------------------------------------
ROM:4D4F                 db  80h ;
ROM:4D50                 db  80h ;
ROM:4D51                 db  80h ;
ROM:4D52                 db  80h ;
ROM:4D53                 db  80h ;
ROM:4D54                 db  80h ;
ROM:4D55                 db    0
ROM:4D56                 db 0FEh ; 
ROM:4D57                 db 0E7h ; 
ROM:4D58                 db  18h
ROM:4D59                 db 0C3h ; 
ROM:4D5A                 db    0
ROM:4D5B                 db    0
ROM:4D5C                 db    0
ROM:4D5D                 db  80h ;
ROM:4D5E                 db  80h ;
ROM:4D5F                 db  80h ;
ROM:4D60                 db  80h ;
ROM:4D61                 db  80h ;
ROM:4D62                 db    0
ROM:4D63                 db 0C3h ; 
ROM:4D64                 db  18h
ROM:4D65                 db 0E7h ; 
ROM:4D66                 db 0FEh ; 
ROM:4D67                 db    0
ROM:4D68                 db  0Bh


格式化后，最终CPU执行在 4D01 的位置指令关闭写入磁盘信号。模拟软驱向 0x180FF 地址写入 0x00。
4D01                 out     (10h), a

ROM:4CF9 loc_4CF9:                               ;
ROM:4CF9                 ld      a, (iy+33h)
ROM:4CFC                 or      40h ; '@'
ROM:4CFE                 ld      (iy+33h), a
ROM:4D01                 out     (10h), a
ROM:4D03                 ld      b, 27h ; '''
ROM:4D05                 call    STPOUT_5F01
ROM:4D08                 ld      (iy+12h), 0
ROM:4D0C                 ld      (iy+11h), 0
ROM:4D10
ROM:4D10 loc_4D10:                               ;
ROM:4D10                 ld      ix, 4D67h
ROM:4D14
ROM:4D14 loc_4D14:                               ;
ROM:4D14                 call    IDAM_53EA
ROM:4D17                 jr      nz, loc_4D45


-----------------------------------------------------------------
写入

ROM:59BA                 call    IDAM_53EA
ROM:59BD                 jp      z, loc_59C6
ROM:59C0                 cp      11h
ROM:59C2                 ret     z
ROM:59C3                 ld      a, 9
ROM:59C5                 ret

ROM:59C6 loc_59C6:                               ;
ROM:59C6                 exx
ROM:59C7                 ld      d, (iy+33h)
ROM:59CA                 res     6, d
ROM:59CC                 ld      a, d
ROM:59CD                 out     (10h), a
开始写入

-----------------------------------------------------------------


By the way,the VZ disk system uses a fairly standard single density storage format with 40 tracks each of sixteen 128-byte sectors, This gives 624 sectors, or 78K bytes of formatted storage per disk. Not cnormous, but quite practical.

TABLE 2. VZ DISK SYSTEM-COMMANDS
INIT			Formats a blank diskette for use(either soft or hard sector)
DIR			Lists the files on a disk
STATUS			Glves avalilable storage space on disk(in both sectors and bytes)
SAVE"filename"		Saves BASIC program to disk with filename given (8 chars maximum)
LOAD"filename"		Loads named program into memory without executing
RUN""filename"		Loads named program and starts execution REN"oldname","newname"	Rename disk file
ERA"filename"		Erase disk flile
DRIVE n			Change currently used disk drive(n=1 or 2)
BSAVE"flename",s,e	Save binary file (eg, machine language program), with fllename given, starting at address s and ending at address e(both in hex)
BLOAD"filename"		Load named binary file into memory
BRUN"filename"		Load named machine language program into memory and begin execution
DCOPY"filename"		Copy named disk file from one disk to another
OPEN"filename"		Open a data file for write or read
PR"filename"		Write data to opened disk file
IN#"filename"		Read dala trom opened disk flle
CLOSE"filename"		Close disk file


// vz dsk 参数
// 154 * 16  * 40 = 98560 = 0x18100
// 154 * 16 = 2464 = 0x9A0 = 0x4D0 * 2


0x10 write-only
Latch

0x11 read-only
DATA

0x12 read-only
POLLING

0x13 read-only
WRITE PROTECT

POLLING 在8个数据位读完后清零

0x10
bit 4 == 1 drive1
bit 7 == 1 drive2

bit 6 == 0 写入操作
bit 5      需要写入数据

10 = 1
01 = 1
11 = 0
00 = 0

锁存数据与当前数据作异或操作

每位开头反转。

连续两个操作写数据，不同则数据为1。
		       if( (vtech1_fdc_latch ^ data) & 0x20 )
			    vtech1_data |= 1;

连续两个写操作改变则位计数器清零 if( (vtech1_fdc_latch ^ data) & 0x40 )



LASER310 时钟为 3.54MHz
17.7M/5 = 3.54MHz

磁盘每位长度为 32.2us
写入时，逐位写入。
读数据时，一次一个字节。

INIT时，两次写入相差读入是  0x26 + 0x1A + 0x2d = 0x6D 长度 （CPU时钟）
交替写入 1, 0

(109+3)/3.54 = 31.6384


0x55 = 85
0x1A = 26
0x55+0x1A = 0x6F = 111

实际：0x55 + 2 + 1 + 1
实际：0x1A + 2

初始化循环长度为 0x75 = 117


INIT初始化命令，采用了写入、写入、读取操作。


读取

通过读取 12 （POLLING）找到时钟位，为 1，等 0x43 时钟周期，读取数据。
读取完数据，等 0x0E 时钟周期，跳过数据区。

执行 DIR 命令时，读取 POLLING 的指令地址： 5428 5429 (INP 12) 542A 542B 542C 读取数据查找 0x80

为了避免过于准确陷入读取 POLLING 循环陷阱（始终为0），应加入计数的偏差。
	7'h60:
	begin
		// 让旋转时间有个偏差
		if( (FLOPPY_BYTE==`FD_TRACK_LEN)&(BIT_CNT==4'd0) )
		begin
			CLK_CNT		<=	CLK_CNT + 4;
		end
		else
		begin
			CLK_CNT		<=	CLK_CNT + 1;
		end

ROM:5431 loc_5431:                               ;
ROM:5431                                         ;
ROM:5431                 ld      a, (68DFh)
ROM:5434                 and     4
ROM:5436                 jr      z, loc_540E
ROM:5438                 in      a, (11h)
ROM:543A                 ld      b, a
ROM:543B
ROM:543B loc_543B:                               ;
ROM:543B                 in      a, (c)
ROM:543D                 jp      p, loc_543B
ROM:5440                 ld      a, b
ROM:5441
ROM:5441 loc_5441:                               ;
ROM:5441                 cp      80h ;
ROM:5443                 jp      nz, loc_5431

两次读取 POLLING 的时间相差 0x16个时钟周期，所以 POLLING 的长度不小于 0x16，这样不会跳过POLLING信号。

这两个指令读取POLLING，长度0x16个时钟周期
ROM:543B loc_543B:                               ;
ROM:543B                 in      a, (c)
ROM:543D                 jp      p, loc_543B

----------------------------------------------------------

12 0x43
11 0x0E
0x0E+0x43 = 0x51 = 81

11
12
12
0x0E+0x43+0x14 = 0x65
0x0E+0x43+0x14+0x0E = 0x73

1/3.54 = 0.2825 us
0x0E/3.54 = 14/3.54 = 3.95 us
0x43/3.54 = 67/3.54 = 18.9 us
0x14/3.54 = 20/3.54 = 5.65 us

0x16/3.54 = 22/3.54 = 6.21 us

110 0x6E

60×1,000,000÷85÷(110÷3.54)÷9 = 2524个字节

60×1,000,000÷85÷((109+3)÷3.54)÷9 = 2478.99个字节

32.2us*3.54 = 114 = 0x72


0x43 + 2 + 0xE + 2 + 0x14 + 2 = 0x68

-----------------------------------------------------------------
60×1,000,000÷85÷32.2÷9 = 2235.8个字节

60×1,000,000÷85÷32.2÷8 = 2740个字节


60*1,000,000/85/（(109+3)/3.54）/8

60*1000000*3.54/85/(109+3)/8 = 3062个字节

60×1,000,000÷80÷32.2÷8 = 2911.5个字节


-----------------------------------------------------------------

DOS ENTRY POINTS
A jump table to the DOS subroutines is positioned at the fixed address from 4008H to 4044H. The jump table contains
the following elements:
ADDRESS CONTENT DOS SUBROUTINE
4008H JP PWRON Disk power ON
400BH JP PWOFF Disk power OFF
400EH JP ERROR Error handling routine
4011H JP RDMAP Read the track map of the disk
4014H JP CLEAR Clear a sector of the disk
4017H JP SVMAP Save the track map to the disk
401AH JP INIT Initialize the disk
401DH JP CSI Command string interpreter
4020H JP HEX Convert ASCII to HEX
4023H JP IDAM Read identification address mark
4026H JP CREATE Create an entry in directory
4029H JP MAP Search for empty sector
402CH JP SEARCH Search for file in directory
402FH JP FIND Search empty space in directory
4032H JP WRITE Write a sector to disk
4035H JP READ Read a sector from disk
4038H JP DLY Delay mS in reg C
403BH JP STPIN Step in
403EH JP STPOUT Step out
4041H JP DKLOAD Load a file from disk
4044H JP SAVEOB Save a file to disk


ERROR CODEERROR
0	No error Syntax error
2	File already exists
4	Disk write protected
5	File not open
6	Disk I/O error
8	File already open
9	Sector not found
10	Checksum error
11	Unsupported device12File type mismatch
13	File not found
14	Disk buffer full
15	Illegal read
16	Illegal write
17	Break
